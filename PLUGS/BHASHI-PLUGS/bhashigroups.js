const {readEnv,updateEnv} = require('../BHASHI-DB/settingsdb2')
const { cmd, commands } = require('../commands');

if (require("../package.json").version === "1.0.0") {
    return console.log("ado thota puluwnnm mt kochchr pulundh");
}
// Helper function to check permissions
const checkPermissions = (isGroup, isAdmins, isOwner, isBotAdmins, isDev) => {
    // Ensure the command is being used in a group
    if (!isGroup) return 'This command can only be used in groups.';

    // Ensure the user is an admin or the owner or has the IsDev permission
    if (!isAdmins && !isOwner && !isDev) return 'This command can only be used by group admins or users with IsDev permission.';

    // Ensure the bot is an admin
    if (!isBotAdmins) return 'Bot must be admin to use this command.';

    // All checks passed
    return null;
};

cmd({
    pattern: "lock",
    desc: "üîí Lock the group settings (only admins can modify).",
    fromMe: true,
    category: "group",
    filename: __filename
}, async (conn, mek, m, { reply,isGroup,isOwner, isBotAdmins, isAdmins,isDev }) => {
    try {
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);
        const groupId = m.chat; // Get the group ID from the message context
        await conn.groupSettingUpdate(groupId, 'locked'); // Lock the group settings
        reply("*üîí The group settings have been locked. Only admins can modify settings now.*");
    } catch (error) {
        console.error("Error locking group settings:", error);
        reply("‚ö†Ô∏è An error occurred while locking the group settings: " + error.message);
    }
});

cmd({
    pattern: "unlock",
    desc: "üîì Unlock the group settings (anyone can modify).",
    fromMe: true,
    category: "group",
    filename: __filename
}, async (conn, mek, m, { reply,isGroup,isOwner, isBotAdmins, isAdmins,isDev }) => {
    try {
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);
        const groupId = m.chat; // Get the group ID from the message context
        await conn.groupSettingUpdate(groupId, 'unlocked'); // Unlock the group settings
        reply("*üîì The group settings have been unlocked. Anyone can modify settings now.*");
    } catch (error) {
        console.error("Error unlocking group settings:", error);
        reply("‚ö†Ô∏è An error occurred while unlocking the group settings: " + error.message);
    }
});


cmd({
    pattern: "approveall",
    desc: "Approve all pending member requests in the group.",
    category: "group",
    react: "‚úÖ",
    filename: __filename
}, async (conn, mek, m, { from, isGroup,isOwner, isBotAdmins, isAdmins, reply,isDev }) => {
    try {
        const config = await readEnv(); // Load the configuration for language settings

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        // Get group metadata
        const groupMetadata = await conn.groupMetadata(from);
        const participants = groupMetadata.participants;

        // Filter for pending participants (not yet in the group)
        const pendingRequests = participants.filter(participant => participant.status === 'pending');

        if (pendingRequests.length === 0) {
            return reply(config.LANGUAGE === 'SI' 
                ? '*‚ùå ‡∂ö‡∑ä‡∑Ç‡∑ö‡∂∏ ‡∂Ö‡∂∫‡∂Ø‡∑î‡∂∏‡∑ä ‡∂¥‡∂≠‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠.*' 
                : '*‚ùå There are no pending requests to approve.*');
        }

        // Approve all pending requests
        const approvedMembers = [];
        for (const request of pendingRequests) {
            await conn.groupParticipantsUpdate(from, [request.id], 'add');
            approvedMembers.push(request.id);
        }

        // Notify the group about the approved members
        await conn.sendMessage(from, {
            text: `${config.LANGUAGE === 'SI' ? '*‚úÖ ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∑Ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ù:*' : '*‚úÖ Approved members:*'}\n` +
                  `${approvedMembers.map(id => `@${id.split('@')[0]}`).join('\n')}`,
            mentions: approvedMembers
        });

        reply(config.LANGUAGE === 'SI' 
            ? '*‚úÖ ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂Ö‡∂∫‡∂Ø‡∑î‡∂∏‡∑ä ‡∂¥‡∂≠‡∂±‡∑ä ‡∂Ö‡∂±‡∑î‡∂∏‡∂≠ ‡∂ö‡∂ª ‡∂á‡∂≠.*' 
            : '*‚úÖ All pending requests have been approved.*');
    } catch (e) {
        console.error(e);
        reply(`${config.LANGUAGE === 'SI' ? '‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:' : 'Error:'} ${e}`);
    }
});
cmd({
    pattern: "revoke",
    desc: "Revoke the group invitation link and send a new link.",
    category: "group",
    react: "üîí",
    filename: __filename
}, async (conn, mek, m, { from, isGroup,isOwner, isBotAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        // Check if the command is used in a group
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        // Revoke the group invite link
        await conn.groupRevokeInvite(from);

        // Generate a new invitation link
        const newInviteLink = await conn.groupInviteCode(from);

        // Notify the user about the revocation and the new link
        await reply(config.LANGUAGE === 'SI' 
            ? `*üîí ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö ‡∂Ü‡∂ª‡∑è‡∂∞‡∂±‡∑è ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è ‡∂Ö‡∑Ñ‡∑í‡∂∏‡∑í ‡∂ö‡∂ª ‡∂á‡∂≠.*\n\n*‡∂±‡∑Ä ‡∂Ü‡∂ª‡∑è‡∂∞‡∂±‡∑è ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è:* https://chat.whatsapp.com/${newInviteLink}` 
            : `*üîí The group invitation link has been revoked.*\n\n*New invitation link:* https://chat.whatsapp.com/${newInviteLink}`);

    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI' 
            ? `‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}` 
            : `Error: ${e}`);
    }
});
cmd({
    pattern: "add",
    desc: "Add a member to the group.",
    category: "group",
    react: "‚ûï",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        const user = q.split(' ')[0];
        if (!user) {
            return reply(config.LANGUAGE === 'SI' 
                ? '‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ø‡∑î‡∂ª‡∂ö‡∂Æ‡∂± ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.' 
                : 'Please provide a phone number to add.');
        }

        await conn.groupParticipantsUpdate(from, [`${user}@s.whatsapp.net`], 'add');
        await reply(config.LANGUAGE === 'SI'
            ? `@${user} ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ß ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í.` 
            : `@${user} has been added to the group.`, { mentions: [`${user}@s.whatsapp.net`] });
    } catch (e) {
        console.log(e);
        reply(config.LANGUAGE === 'SI' 
            ? `‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}` 
            : `Error: ${e}`);
    }
});
cmd({
    pattern: "seticon",
    desc: "Set a new group icon.",
    category: "group",
    filename: __filename,
    react: "üñºÔ∏è"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        if (!m.quoted) return reply(config.LANGUAGE === 'SI'
            ? "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ú‡∑≤‡∂¥‡∂∫‡∑ö ‡∂ª‡∑ñ‡∂¥‡∂∫ ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ª‡∑ñ‡∂¥‡∂∫‡∂ö‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±."
            : "Please reply to an image to set it as the group icon.");

        const media = await conn.downloadAndSaveMediaMessage(m.quoted);
        await conn.updateProfilePicture(from, { url: media });

        reply(config.LANGUAGE === 'SI'
            ? "‚úÖ ‡∂ú‡∑≤‡∂¥‡∂∫‡∑ö ‡∂ª‡∑ñ‡∂¥‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª ‡∂á‡∂≠."
            : "‚úÖ Group icon has been updated successfully.");
    } catch(e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// New command: Tag all group members
cmd({
    pattern: "tagall",
    desc: "Mention all group members.",
    category: "group",
    filename: __filename,
    react: "üì¢"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, participants, reply,isDev }) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        let teks = config.LANGUAGE === 'SI'
            ? "üì¢ *‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ú‡∑ö ‡∂Ö‡∑Ä‡∂∞‡∑è‡∂±‡∂∫!*\n\n"
            : "üì¢ *Attention All Members!*\n\n";

        for (let mem of participants) {
            teks += `@${mem.id.split('@')[0]}\n`;
        }

        conn.sendMessage(from, { text: teks, mentions: participants.map(a => a.id) });
    } catch(e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// New command: Remove all members (except bot and group creator)
cmd({
    pattern: "removeall",
    desc: "Remove all members from the group (except bot and group creator).",
    category: "group",
    filename: __filename,
    react: "üö´"
},
async (conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, groupMetadata, reply ,isDev}) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        if (!isOwner) return reply(config.LANGUAGE === 'SI'
            ? "‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö ‡∂ú‡∑≤‡∂¥‡∑ä ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò‡∂ß ‡∂¥‡∂∏‡∂´‡∑í."
            : "This command can only be used by the group creator.");

        const creator = groupMetadata.owner;
        const botId = conn.user.id;
        const participants = groupMetadata.participants.filter(p => p.id !== creator && p.id !== botId);

        await conn.groupParticipantsUpdate(from, participants.map(p => p.id), "remove");
        reply(config.LANGUAGE === 'SI'
            ? "*üö´ ‡∂ú‡∑≤‡∂¥‡∑ä‡∂∫‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠ (‡∂∂‡∑ú‡∂ß‡∑ä ‡∑É‡∑Ñ ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò ‡∑Ñ‡∑ê‡∂ª).*"
            : "*üö´ All members have been removed from the group (except the bot and group creator).*");
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});

// Function to handle group promotion
cmd({
    pattern: "promote",
    desc: "Promote a user to admin.",
    category: "group",
    filename: __filename,
    react: "‚¨ÜÔ∏è"
},
async (conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply ,isDev}) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;


        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        const mentionedJid = m.message.extendedTextMessage?.contextInfo?.mentionedJid;
        if (!mentionedJid || mentionedJid.length === 0) return reply(config.LANGUAGE === 'SI'
            ? "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∂ª‡∑ä‡∂∞‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑è ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
            : "Please mention the user you want to promote.");

        await conn.groupParticipantsUpdate(from, mentionedJid, "promote");
        reply(config.LANGUAGE === 'SI'
            ? "*‚úÖ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑è ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂Ω‡∑ô‡∑É ‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∂ª‡∑ä‡∂∞‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠.*"
            : "*‚úÖ User promoted to admin successfully.*");
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// Function to handle group demotion
cmd({
    pattern: "demote",
    desc: "Demote an admin to regular user.",
    category: "group",
    filename: __filename,
    react: "‚¨áÔ∏è"
},
async (conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        const mentionedJid = m.message.extendedTextMessage?.contextInfo?.mentionedJid;
        if (!mentionedJid || mentionedJid.length === 0) return reply(config.LANGUAGE === 'SI'
            ? "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑è ‡∑Ä‡∑ê‡∂©‡∑ô‡∑Ñ‡∑í ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∂±‡∑ä‡∂±."
            : "Please mention the admin you want to demote.");

        await conn.groupParticipantsUpdate(from, mentionedJid, "demote");
        reply(config.LANGUAGE === 'SI'
            ? "*‚úÖ ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑è ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∂ß ‡∂¥‡∑Ñ‡∂≠ ‡∂Ø‡∂∏‡∑è ‡∂á‡∂≠.*"
            : "*‚úÖ Admin demoted to regular user successfully.*");
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// Function to handle group invites
cmd({
    pattern: "invite",
    desc: "Get the group invite link.",
    category: "group",
    filename: __filename,
    react: "üîó"
},
async (conn, mek, m, { from, isGroup,isOwner, isBotAdmins, reply ,isDev}) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);
        const inviteCode = await conn.groupInviteCode(from);
        reply(config.LANGUAGE === 'SI'
            ? `*üîó ‡∂ú‡∑≤‡∂¥‡∑ä ‡∂Ü‡∂ª‡∑è‡∂∞‡∂± ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫: https://chat.whatsapp.com/${inviteCode}*`
            : `*üîó Group Invite Link: https://chat.whatsapp.com/${inviteCode}*`);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// Function to get group info
cmd({
    pattern: "groupinfo",
    desc: "Get information about the group.",
    category: "group",
    filename: __filename,
    react: "‚ÑπÔ∏è"
},
async(conn, mek, m, { from, isGroup, groupMetadata, groupName, participants, groupAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        const groupInfo = config.LANGUAGE === 'SI' 
            ? `
üìã *‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î*
üë• *‡∂±‡∂∏:* ${groupName}
üìù *‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫:* ${groupMetadata.desc || '‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠'}
üÜî *ID:* ${from}
üëë *‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò:* ${groupMetadata.owner || '‡∂Ω‡∂∂‡∑è ‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö'}
üë§ *‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä:* ${participants.length}
üëÆ *‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä:* ${groupAdmins.length}
üìÖ *‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂´‡∂∫ ‡∑Ä‡∑ñ ‡∂Ø‡∑í‡∂±‡∂∫:* ${new Date(groupMetadata.creation * 1000).toLocaleString()}
            `
            : `
üìã *Group Information*
üë• *Name:* ${groupName}
üìù *Description:* ${groupMetadata.desc || 'No description'}
üÜî *ID:* ${from}
üëë *Owner:* ${groupMetadata.owner || 'Not available'}
üë§ *Members:* ${participants.length}
üëÆ *Admins:* ${groupAdmins.length}
üìÖ *Created:* ${new Date(groupMetadata.creation * 1000).toLocaleString()}
            `;

        reply(groupInfo);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// New command: Kick user
cmd({
    pattern: "kick",
    desc: "Kick a user from the group.",
    category: "group",
    filename: __filename,
    react: "üë¢"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply ,isDev}) => {
    const config = await readEnv();
    try {

        const senderNumber = m.sender;
        const isGroup = m.isGroup || false;
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        const mentionedJid = m.message.extendedTextMessage?.contextInfo?.mentionedJid;
        if (!mentionedJid || mentionedJid.length === 0) return reply(config.LANGUAGE === 'SI'
            ? "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑è ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
            : "Please mention the user you want to kick.");

        await conn.groupParticipantsUpdate(from, mentionedJid, "remove");
        reply(config.LANGUAGE === 'SI'
            ? "*üë¢ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑è ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠.*"
            : "*üë¢ User has been kicked from the group.*");
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});

// New command: Change group subject
cmd({
    pattern: "setsubject",
    desc: "Change the group subject.",
    category: "group",
    filename: __filename,
    react: "‚úèÔ∏è"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, args, reply,isDev }) => {
    const config = await readEnv();
    try {

        const senderNumber = m.sender;

        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        const newSubject = args.join(" ");
        if (!newSubject) return reply(config.LANGUAGE === 'SI'
            ? "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö ‡∂±‡∑Ä ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±."
            : "Please provide a new subject for the group.");

        await conn.groupUpdateSubject(from, newSubject);
        reply(config.LANGUAGE === 'SI'
            ? `*‚úèÔ∏è ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í: ${newSubject}*`
            : `*‚úèÔ∏è Group subject has been updated to: ${newSubject}*`);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// New command: Change group description
cmd({
    pattern: "setdesc",
    desc: "Change the group description.",
    category: "group",
    filename: __filename,
    react: "üìù"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, args, reply ,isDev}) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        const newDesc = args.join(" ");
        if (!newDesc) return reply(config.LANGUAGE === 'SI'
            ? "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö ‡∂±‡∑Ä ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫ ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±."
            : "Please provide a new description for the group.");

        await conn.groupUpdateDescription(from, newDesc);
        reply(config.LANGUAGE === 'SI'
            ? `*üìù ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫ ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í.*`
            : `*üìù Group description has been updated.*`);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// New command: Mute group
const cron = require('node-cron');

let scheduledMutes = new Map(); // To store scheduled mutes
let scheduledUnmutes = new Map(); // To store scheduled unmutes

cmd({
    pattern: "mute",
    desc: "Mute the group (only admins can send messages).",
    category: "group",
    filename: __filename,
    react: "üîá"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        await conn.groupSettingUpdate(from, 'announcement');
        reply(config.LANGUAGE === 'SI'
            ? `*üîá ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∂±‡∑ì‡∂ª‡∑ä‡∑Ä‡∂†‡∂±‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠. ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑ê‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.*`
            : `*üîá Group has been muted. Only admins can send messages now.*`);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// New command: Unmute group
cmd({
    pattern: "unmute",
    desc: "Unmute the group (allow all participants to send messages).",
    category: "group",
    filename: __filename,
    react: "üîä"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        const senderNumber = m.sender;


        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);

        await conn.groupSettingUpdate(from, 'not_announcement');
        reply(config.LANGUAGE === 'SI'
            ? `*üîä ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∂±‡∑í‡∂Ø‡∑Ñ‡∑É‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠. ‡∂Ø‡∑ê‡∂±‡∑ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ß ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑ê‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.*`
            : `*üîä Group has been unmuted. All participants can send messages now.*`);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// Auto mute command
cmd({
    pattern: "amute",
    desc: "Schedule auto mute for the group at a specified time.",
    category: "group",
    filename: __filename,
    react: "üîá"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply,isDev }) => {
    try {
        
        const config = await readEnv();
        const [time] = m.body.split(" ").slice(1);
        const currentTime = new Date();
        const [hours, minutes] = time.split('.').map(Number);
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);
        const muteTime = new Date();
        muteTime.setHours(hours, minutes, 0, 0);

        // Check if the time is in the past
        if (muteTime <= currentTime) {
            return reply(config.LANGUAGE === 'SI'
                ? "*üö´ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∂±‡∑í‡∑Ñ‡∂≠‡∂∏‡∑è‡∂±‡∑ì ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ö‡∑è‡∂Ω‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì‡∂±‡∑ä‡∂±.*"
                : "*üö´ Please provide a future time to schedule the mute.*");
        }

        const timezone = config.TIMEZONE; // Fetch timezone from config
        const delay = muteTime.getTime() - currentTime.getTime();

        // Schedule the mute
        scheduledMutes.set(from, cron.schedule(`* ${minutes} ${hours} * * *`, async () => {
            await conn.groupSettingUpdate(from, 'announcement');
            reply(config.LANGUAGE === 'SI'
                ? `*üîá ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂±‡∑í‡∑Ñ‡∂≠‡∂∏‡∑è‡∂±‡∑ì ‡∂ö‡∂ª ‡∂á‡∂≠. ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑ê‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.*`
                : `*üîá Group has been automatically muted. Only admins can send messages now.*`);
            scheduledMutes.delete(from); // Remove the schedule after execution
        }, {
            timezone
        }));

        reply(config.LANGUAGE === 'SI'
            ? `*‚úÖ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ${time} ‡∂ß ‡∂±‡∑í‡∑Ñ‡∂≠‡∂∏‡∑è‡∂±‡∑ì ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ö‡∑è‡∂Ω‡∑É‡∂ß‡∑Ñ‡∂±‡∂ß ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠.*`
            : `*‚úÖ Auto mute has been scheduled at ${time}.*`);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


// Auto unmute command
cmd({
    pattern: "aunmute",
    desc: "Schedule auto unmute for the group at a specified time.",
    category: "group",
    filename: __filename,
    react: "üîä"
},
async(conn, mek, m, { from, isGroup, isAdmins, isOwner, isBotAdmins, reply,isDev }) => {
    try {
        const config = await readEnv();
        const [time] = m.body.split(" ").slice(1);
        const currentTime = new Date();
        const [hours, minutes] = time.split('.').map(Number);

        const unmuteTime = new Date();
        unmuteTime.setHours(hours, minutes, 0, 0);
        const permissionError = checkPermissions(isGroup, isAdmins, isOwner, isBotAdmins, isDev);
        if (permissionError) return reply(permissionError);
        // Check if the time is in the past
        if (unmuteTime <= currentTime) {
            return reply(config.LANGUAGE === 'SI'
                ? "*üö´ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∂±‡∑í‡∂Ø‡∑Ñ‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ö‡∑è‡∂Ω‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì‡∂±‡∑ä‡∂±.*"
                : "*üö´ Please provide a future time to schedule the unmute.*");
        }

        const timezone = config.TIMEZONE; // Fetch timezone from config
        const delay = unmuteTime.getTime() - currentTime.getTime();

        // Schedule the unmute
        scheduledUnmutes.set(from, cron.schedule(`* ${minutes} ${hours} * * *`, async () => {
            await conn.groupSettingUpdate(from, 'not_announcement');
            reply(config.LANGUAGE === 'SI'
                ? `*üîä ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂±‡∑í‡∂Ø‡∑Ñ‡∑É‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠. ‡∂Ø‡∑ê‡∂±‡∑ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ß ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑ê‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.*`
                : `*üîä Group has been automatically unmuted. All participants can send messages now.*`);
            scheduledUnmutes.delete(from); // Remove the schedule after execution
        }, {
            timezone
        }));

        reply(config.LANGUAGE === 'SI'
            ? `*‚úÖ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ${time} ‡∂ß ‡∂±‡∑í‡∂Ø‡∑Ñ‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ö‡∑è‡∂Ω‡∑É‡∂ß‡∑Ñ‡∂±‡∂ß ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠.*`
            : `*‚úÖ Auto unmute has been scheduled at ${time}.*`);
    } catch (e) {
        console.error(e);
        reply(config.LANGUAGE === 'SI'
            ? `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`
            : `‚ùå Error: ${e}`);
    }
});


module.exports = {
    // You can export any additional functions or variables if needed
};
